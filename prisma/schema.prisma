// schema.prisma
datasource db {
  provider = "postgresql"
  // Don't forget to set this value in .env file
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Client {
  id        String    @id @default(cuid())
  card      String?   @unique @default(dbgenerated("gen_random_uuid()"))
  firstname String
  lastname  String
  email     String    @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  //relation
  products  Product[]

  @@map(name: "Clients")
}

model Product {
  id                String   @id @default(cuid())
  name              String
  price             Decimal
  qrcode            String?  @unique @map(name: "qrcode")
  published         Boolean  @default(true)
  warrantyExpiresOn DateTime
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  status            Status   @default(READY_TO_USE)

  //owner relation
  owner   Client? @relation(fields: [ownerId], references: [id])
  ownerId String?

  //certification relation
  CertifiedEntity   CertifiedEntity? @relation(fields: [certifiedBy], references: [publicKey])
  certifiedBy String?

  //event relation
  events Event[]
}

enum Status {
  READY_TO_USE
  UNDER_REPAIR
  OUT
}

model Event {
  id                String           @id @default(cuid())
  content           String
  createdAt         DateTime         @default(now()) @map(name: "created_at")
  //relation product
  Product           Product?         @relation(fields: [productId], references: [id])
  productId         String?
  //relation one to one eventType
  eventType         EventType?       @relation(fields: [eventTypeId], references: [id])
  eventTypeId       String?
  //relation one to one eventCommercial
  eventCommercial   EventCommercial? @relation(fields: [eventCommercialId], references: [id])
  eventCommercialId String?

  CertifiedEntity   CertifiedEntity? @relation(fields: [certifiedEntityPublicKey], references: [publicKey])
  certifiedEntityPublicKey String?
}

model EventCommercial {
  id              String   @id @default(cuid())
  action          Decimal
  shall_expire_on DateTime
  Event           Event[]
}

model EventType {
  id      String  @id @default(cuid())
  content String  @unique @map(name: "content")
  slug    String  @unique @map(name: "slug")
  events  Event[]
}

model CertifiedEntity {
  publicKey String     @id @unique @map(name: "publicKey")
  name      String
  type      EntityType

  // Products relation
  products Product[]

  // Events relation
  events Event[]
}

enum EntityType {
  PROVIDER
  SELLER
}
